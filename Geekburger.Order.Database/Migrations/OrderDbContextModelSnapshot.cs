// <auto-generated />
using System;
using Geekburger.Order.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Geekburger.Order.Database.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    partial class OrderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("Geekburger.Order.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Geekburger.Order.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RequesterId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("CardOwnerName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "RequesterId");

                    b.ToTable("OrdersPayments");
                });

            modelBuilder.Entity("Geekburger.Order.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "ProductId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("Geekburger.Order.Domain.Entities.Production", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductionId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId", "ProductionId");

                    b.ToTable("OrdersProduction");
                });

            modelBuilder.Entity("Geekburger.Order.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Geekburger.Order.Domain.Entities.Order", null)
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geekburger.Order.Domain.Entities.Product", b =>
                {
                    b.HasOne("Geekburger.Order.Domain.Entities.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geekburger.Order.Domain.Entities.Production", b =>
                {
                    b.HasOne("Geekburger.Order.Domain.Entities.Order", null)
                        .WithMany("Productions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geekburger.Order.Domain.Entities.Order", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Productions");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
